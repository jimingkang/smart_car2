#!/usr/bin/env python
import RPi.GPIO as GPIO
import video_dir
import car_dir
import motor
import stepper1
import stepper22

from socket import *
from time import ctime
import rospy
import time
import os
from std_msgs.msg import String
from std_msgs.msg import Int16
from geometry_msgs.msg import Twist

busnum = 1 
offset_x = 0
offset_y = 0
offset = 0
forward0 = True
forward1 = True

#hall efffect on motor
C1=19
C2=21
c1_count=0
c2_count=0
theta=500/180.0
cnt_left=500
cnt_right=500
# How many times to turn the pin on and off each second
Frequency = 20
# How long the pin stays on each cycle, as a percent (here, it's 30%)
DutyCycle = 30
# Setting the duty cycle to 0 means the motors will not turn
Stop = 0
speed=20
then=0
nowtime=0
# Set the GPIO to software PWM at 'Frequency' Hertz
cmd=""
homeposition=""
step1_position=0
step2_position=0
#pub_rwheel = rospy.Publisher('rwheel_cnt',Int16 ,queue_size=10)
#pub_lwheel = rospy.Publisher('lwheel_cnt', Int16,queue_size=10)
# Start the software PWM with a duty cycle of 0 (i.e. not moving)
step=32
def readfile():
	newfile = "./home_position.txt"
	if not os.path.exists(newfile):
		f = open(newfile,'w')
		print newfile
		f.close()
		print newfile + " created."
	else:
		print newfile + " already existed."
		fo = open(newfile, 'r+')
		line=fo.readline()
		line = line.strip()
		homeposition=line
		print "homeposition ", (homeposition)
		fo.close()
	return
def writefile(position):
	newfile = "./home_position.txt"
	if not os.path.exists(newfile):
		f = open(newfile,'w')
		print newfile
		f.close()
		print newfile + " created."
	else:
		print newfile + " already existed."
		fo = open(newfile, 'wr')
		fo.write(position)
		fo.close()
	return
def setup_interupt():
	GPIO.setup(C1, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
	GPIO.setup(C2, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
	#GPIO.add_event_detect(C1, GPIO.FALLING, callback=C1_callback, bouncetime=1)
	#GPIO.add_event_detect(C2, GPIO.FALLING, callback=C2_callback2, bouncetime=1)
def setup():

	global offset_x,  offset_y, offset, forward0, forward1
	offset_x = 0
	offset_y = 0
	offset = 0
	forward0 = 'True'
	forward1 = 'True'
	#video_dir.setup(busnum=busnum)
	#car_dir.setup(busnum=busnum)
	#motor.setup(busnum=busnum)
	#video_dir.calibrate(offset_x, offset_y)
	#car_dir.calibrate(offset)
	#setup_interupt()
	stepper1.setup()
	stepper22.setup()
	readfile()
	print "homeposition:",homeposition

def REVERSE(x):
	if x == 'True':
		return 'False'
	elif x == 'False':
		return 'True'


def move(twist):
	global  theta, cnt_left,cnt_right
	global cmd, speed
	global homeposition,step1_position,step2_position
	dir_stepper1=1
	dir_stepper2=1
	print("twist x,y,x,ang-z:", twist.linear.x, twist.linear.y,twist.linear.z,twist.angular.z)
	if ((float)(twist.linear.x) > 0) & ((float)(twist.angular.z) > 0):
		dir_stepper1=1
		dir_stepper2 = 1
		stepper1.move(1, step, dir_stepper1)
		stepper22.move(1, step, dir_stepper2)
		step1_position=step1_position+step*dir_stepper2
		step2_position = step2_position + step * dir_stepper1
	elif  ((float)(twist.linear.x) < 0) & ((float)(twist.angular.z) > 0):
		dir_stepper1 = -1
		dir_stepper2 = 1
		stepper1.move(1, step, dir_stepper1)
		stepper22.move(1, step, dir_stepper2)
		step1_position = step1_position + step * dir_stepper2
		step2_position = step2_position + step * dir_stepper1
	elif  ((float)(twist.linear.x) > 0) & ((float)(twist.angular.z) < 0):
		dir_stepper1 = 1
		dir_stepper2 = -1
		stepper1.move(1, step, dir_stepper1)
		stepper22.move(1, step, dir_stepper2)
		step1_position = step1_position + step * dir_stepper2
		step2_position = step2_position + step * dir_stepper1
	elif  ((float)(twist.linear.x) < 0) & ((float)(twist.angular.z) < 0):
		dir_stepper1 = -1
		dir_stepper2 = -1
		stepper1.move(1, step, dir_stepper1)
		stepper22.move(1, step, dir_stepper2)
		step1_position = step1_position + step * dir_stepper1
		step2_position = step2_position + step * dir_stepper2
	elif  ((float)(twist.linear.x) == 0) & ((float)(twist.angular.z) > 0):
		dir_stepper2 = 1
		stepper22.move(1, step, dir_stepper2)
		step2_position = step2_position + step * dir_stepper2
	elif  ((float)(twist.linear.x) == 0) & ((float)(twist.angular.z) < 0):
		dir_stepper2 = -1
		stepper22.move(1, step, dir_stepper2)
		step2_position = step2_position + step * dir_stepper2
	elif  ((float)(twist.linear.x) > 0) & ((float)(twist.angular.z) == 0):
		dir_stepper1 = 1
		stepper1.move(1, step, dir_stepper1)
		step1_position = step1_position + step * dir_stepper1

	elif  ((float)(twist.linear.x) < 0) & ((float)(twist.angular.z) == 0):
		dir_stepper1 = -1
		stepper1.move(1, step, dir_stepper1)
		step1_position = step1_position + step * dir_stepper1
	print("dir_stepper1 dir_stepper2:", dir_stepper1,dir_stepper2)
	homeposition=step1_position+" "+step2_position



def CommandCallback(commandMessage):
	#command = commandMessage.data
	twist = commandMessage
	move(twist)

rospy.init_node('driver')
setup()

rospy.Subscriber('/cmd_vel', Twist, CommandCallback)


rospy.spin()
print('Shutting down: stopping Steper')
writefile(homeposition)
GPIO.cleanup()
